window.requestAnimFrame = (function(){
    return  window.requestAnimationFrame       || 
        window.webkitRequestAnimationFrame || 
        window.mozRequestAnimationFrame    || 
        window.oRequestAnimationFrame      || 
        window.msRequestAnimationFrame     || 
        function(/* function */ callback, /* DOMElement */ element){
            return window.setTimeout(callback, 1000 / 60);
        };
})();

window.cancelRequestAnimFrame = ( function() {
    return window.cancelAnimationFrame          ||
        window.webkitCancelRequestAnimationFrame    ||
        window.mozCancelRequestAnimationFrame       ||
        window.oCancelRequestAnimationFrame     ||
        window.msCancelRequestAnimationFrame        ||
        clearTimeout
} )();

// Create the canvas
var canvas = document.createElement("canvas");
var ctx = canvas.getContext("2d");
canvas.width = 512;
canvas.height = 512;
document.body.appendChild(canvas);

// Background image
var bgReady = false;
var bgImage = new Image();
bgImage.onload = function () {
	bgReady = true;
};
bgImage.src = "images/map.png";

// Hero image
var heroReady = false;
var heroImage = new Image();
heroImage.onload = function () {
	heroReady = true;
	requestAnimFrame(updateHero);
};
heroImage.src = "images/herosideAni.png";

// Monster image
var monsterReady = false;
var monsterImage = new Image();
monsterImage.onload = function () {
	monsterReady = true;
};
monsterImage.src = "images/baomonster.png";

// Game objects
var hero = {
	speed: 200, // movement in pixels per second
	size: [52, 75]
};
var monster = {
	speed: 100
};
var monstersCaught = 0;

// Handle keyboard controls
var keysDown = {};

addEventListener("keydown", function (e) {
	keysDown[e.keyCode] = true;
	if([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1){
		e.preventDefault();
	}
}, false);

addEventListener("keyup", function (e) {
	delete keysDown[e.keyCode];
	e.preventDefault();
}, false);


// Reset the game when the player catches a monster
var reset = function () {
	hero.x = canvas.width / 2;
	hero.y = canvas.height / 2;

	// Throw the monster somewhere on the screen randomly
	monster.x = 60 + (Math.random() * (canvas.width - 155));
	monster.y = 80 + (Math.random() * (canvas.height - 200));
};

// Update game objects
var beginAni = false;
var request;
var last;
var update = function (modifier) {
	if (38 in keysDown) { // Player holding up
		hero.y -= hero.speed * modifier;
		last = "up";
	}
	if (40 in keysDown) { // Player holding down
		hero.y += hero.speed * modifier;
		last = "down";
	}
	if (37 in keysDown) { // Player holding left
		hero.x -= hero.speed * modifier;
		last = "left";
	}
	if (39 in keysDown) { // Player holding right
		hero.x += hero.speed * modifier;
		//request = requestAnimFrame(updateHero);
		last = "right";
	}
	hero.x = Math.min(Math.max(hero.x, 72), 405);
	hero.y = Math.min(Math.max(hero.y, 85), 375);
	

	//if they're almoooost touching
	if (
		hero.x <= (monster.x + 100)
		&& monster.x <= (hero.x + 100)
		&& hero.y <= (monster.y + 100)
		&& monster.y <= (hero.y + 100)
	) {
		if (38 in keysDown) { // Player holding up
			monster.y -= monster.speed * modifier;
			
		}
		if (40 in keysDown) { // Player holding down
			monster.y += monster.speed * modifier;
			
		}
		if (37 in keysDown) { // Player holding left
			monster.x -= monster.speed * modifier;
			
		}
		if (39 in keysDown) { // Player holding right
			monster.x += monster.speed * modifier;
			//request = requestAnimFrame(updateHero);
			
		}
		
		monster.x = Math.min(Math.max(monster.x, 72), 405);
		monster.y = Math.min(Math.max(monster.y, 85), 375);
	
	}
	
	// Are they touching?
	if (
		hero.x <= (monster.x + 32)
		&& monster.x <= (hero.x + 32)
		&& hero.y <= (monster.y + 50)
		&& monster.y <= (hero.y + 50)
	) {
		++monstersCaught;
		reset();
	}
};

//Draw Hero
function drawHero(){
	if (heroReady) {
		ctx.drawImage(heroImage, frame*hero.size[0], 0, hero.size[0], hero.size[1], hero.x, hero.y, hero.size[0], hero.size[1]);
	}

}

//Animate hero

var frame = 0;
var lastUpdateTime = 0;
var acDelta = 0;
var msPerFrame = 50;
function updateHero(){
	/*if(!(39 in keysDown)){
		return;
	}*/
	requestAnimFrame(updateHero);
	var delta = Date.now() - lastUpdateTime;
	if(acDelta > msPerFrame){
		acDelta = 0;
		drawHero();
		frame++;
		if(frame >= 10){
			frame = 0;
		}
	}
	else{
		acDelta += delta;
		drawHero();
	}
		
	lastUpdateTime = Date.now();
	
}
// Draw everything
var render = function () {
	if (bgReady) {
		ctx.drawImage(bgImage, 0, 0);
	}


	if (monsterReady) {
		ctx.drawImage(monsterImage, monster.x, monster.y);
	}

	// Score
	ctx.save();
	ctx.translate(0,0);
	ctx.rotate(-Math.PI/10);
	ctx.fillStyle = "rgb(250, 250, 250)";
	ctx.font = "20px Myriad Pro";
	ctx.textAlign = "left";
	ctx.textBaseline = "top";
	ctx.fillText("lilbaobaos caught", 90, 105);
	ctx.fillText(monstersCaught, 150, 135);
	ctx.restore();
};

// The main game loop
var main = function () {
	var now = Date.now();
	var delta = now - then;

	update(delta / 1000);
	render();
	then = now;
};

// Let's play this game!
reset();
var then = Date.now();
setInterval(main, 1); // Execute as fast as possible
